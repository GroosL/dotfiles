#!/usr/bin/env bash
#
# Script name: dmconf
# Description: Choose from a list of configuration files to edit.
# Dependencies: dmenu, emacsclient
# GitLab: https://www.gitlab.com/dwt1/dmscripts
# License: https://www.gitlab.com/dwt1/dmscripts/LICENSE
# Contributors: Derek Taylor
#               Simon Ingelsson
#               HostGrady
# Usage:
# to use other editor than emacsclient set DMEDITOR accordingly
#   Example: `DMEDITOR="alacritty -e nvim" ./dmconf`

# Set with the flags "-e", "-u","-o pipefail" cause the script to fail
# if certain things happen, which is a good thing.  Otherwise, we can
# get hidden bugs that are hard to discover.
set -euo pipefail

config="$HOME/.config/dmscripts/config"
# No issues should arrise since it won't even be sourced if the file doesn't exist
# shellcheck disable=SC1090
[[ -f "$config" ]] && source "$config"

: "${DMEDITOR:=emacsclient -c -a emacs}"

if [[ ! "$(declare -p options 2>/dev/null)" == "declare -A"* ]] ; then 
  declare -A options
  options[alacritty]="$HOME/.config/alacritty/alacritty.yml"
  options[awesome]="$HOME/.config/awesome/rc.lua"
  options[bash]="$HOME/.bashrc"
  options[broot]="$HOME/.config/broot/conf.toml"
  options[bspwm]="$HOME/.config/bspwm/bspwmrc"
  options[doom emacs config.el]="$HOME/.config/doom/config.el"
  options[doom emacs config.org]="$HOME/.config/doom/config.org"
  options[doom emacs init.el]="$HOME/.config/doom/init.el"
  options[doom emacs packages.el]="$HOME/.config/doom/packages.el"
  options[dunst]="$HOME/.config/dunst/dunstrc"
  options[dwm]="$HOME/dwm-distrotube/config.def.h"
  options[dwmblocks]="$HOME/dwmblocks-distrotube/blocks.def.h"
  options[fish]="$HOME/.config/fish/config.fish"
  options[herbstluftwm]="$HOME/.config/herbstluftwm/autostart"
  options[i3]="$HOME/.config/i3/config"
  options[ncmpcpp]="$HOME/.config/ncmpcpp/config"
  options[neovim]="$HOME/.config/nvim/init.vim"
  options[picom]="$HOME/.config/picom/picom.conf"
  options[polybar]="$HOME/.config/polybar/config"
  options[qtile]="$HOME/.config/qtile/config.py"
  options[qutebrowser bookmarks]="$HOME/.config/qutebrowser/bookmarks/urls"
  options[qutebrowser quickmarks]="$HOME/.config/qutebrowser/quickmarks"
  options[qutebrowser config.py]="$HOME/.config/qutebrowser/config.py"
  options[spectrwm]="$HOME/.spectrwm.conf"
  options[ssh]="$HOME/.ssh/config"
  options[st]="$HOME/st-distrotube/config.def.h"
  options[stumpwm]="$HOME/.config/stumpwm/config"
  options[surf]="$HOME/surf-distrotube/config.def.h"
  options[sxhkd]="$HOME/.config/sxhkd/sxhkdrc"
  options[tabbed]="$HOME/tabbed-distrotube/config.def.h"
  options[termite]="$HOME/.config/termite/config"
  options[vifm]="$HOME/.config/vifm/vifmrc"
  options[vim]="$HOME/.vimrc"
  options[xmobar mon1 ]="$HOME/.config/xmobar/xmobarrc0"
  options[xmobar mon2]="$HOME/.config/xmobar/xmobarrc1"
  options[xmobar mon3]="$HOME/.config/xmobar/xmobarrc2"
  options[xmonad]="$HOME/.xmonad/README.org"
  options[xinitrc]="$HOME/.xinitrc"
  options[xresources]="$HOME/.Xresources"
  options[zsh]="$HOME/.zshrc"
fi

# Clean options array making sure that the files exist
declare -A options_clean
  for i in "${!options[@]}"; do
    [[ -f ${options["${i}"]} ]] && options_clean["${i}"]=${options["${i}"]}
  done

# Piping the above array (cleaned) into dmenu.
# We use "printf '%s\n'" to format the array one item to a line.
choice=$(printf '%s\n' "${!options_clean[@]}" | sort | dmenu -i -l 20 -p 'Edit config:' "$@")

# What to do when/if we choose a file to edit.
if [ "$choice" ]; then
  cfg=$(printf '%s\n' "${options_clean["${choice}"]}")
  $DMEDITOR "$cfg"

# What to do if we just escape without choosing anything.
else
    echo "Program terminated." && exit 0
fi
